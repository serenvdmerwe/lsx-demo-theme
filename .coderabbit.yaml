# CodeRabbit Configuration for LSX Demo Theme
# WordPress Block Theme Development with AI-Enhanced Code Review
# This configuration provides automated code review specifically tailored for WordPress development
# focusing on Full Site Editing (FSE), block patterns, and modern WordPress standards

# yaml-language-server: $schema=https://coderabbit.ai/integrations/coderabbit-overrides.v2.json
language: 'en'
# Chat Configuration - Enable automated responses for WordPress development questions
chat:
    auto_reply: true # Automatically respond to development questions and code suggestions

# Review Configuration - Optimized for WordPress block theme development
reviews:
    request_changes_workflow: true # Request changes when WordPress standards violations are detected
    high_level_summary: true # Provide comprehensive summaries for complex WordPress features
    poem: false # Disable poetry mode for professional WordPress development
    review_status: true # Show review status for WordPress compliance tracking
    collapse_walkthrough: true # Minimize verbose output for focused WordPress feedback
    # Path Filters - Exclude WordPress build artifacts and development files from review
    path_filters:
        - '!build/**' # Exclude compiled WordPress script builds
        - '!node_modules/**' # Exclude npm dependencies
        - '!assets/css/*.map' # Exclude Sass/CSS source maps
        - '!logs/**' # Exclude development and debug logs
    auto_review:
        enabled: true
        drafts: false
        base_branches:
            - 'main'
            - 'develop'
            - 'feature/*'
            - 'fix/*'
            - 'update/*'
    path_instructions:
        - path: '**/theme.json'
          instructions: |
              "Review theme.json configuration for WordPress block themes:
                - Ensure JSON syntax is valid and properly formatted
                - Verify color palettes use named tokens consistently (primary, secondary, accent)
                - Check typography settings include complete font definitions with fluid clamp() values
                - Validate spacing scales are consistent and use rem units
                - Confirm layout settings define appropriate contentSize and wideSize values
                - Ensure all settings follow WordPress block theme standards
                - Check accessibility compliance with sufficient color contrast ratios (4.5:1 minimum)
                - Verify compatibility with Full Site Editing (FSE) features
                - Validate custom properties don't conflict with core block functionality"
        # WordPress Block Pattern Files (.php)
        # These files define reusable content layouts for the block editor
        - path: '**/patterns/*.php'
          instructions: |
              "Review WordPress block patterns for FSE compatibility:
                - Ensure proper pattern registration using register_block_pattern() function
                - Verify pattern naming follows lsx/[category]-[name] convention
                - Check that patterns use theme.json variables exclusively for styling
                - Validate proper heading hierarchy and accessibility compliance
                - Ensure placeholder content is realistic and appropriate
                - Check patterns maintain design integrity with different content lengths
                - Verify patterns are responsive and work across all viewport sizes
                - Confirm patterns avoid inline styles and use block variations appropriately
                - Validate proper block nesting and semantic HTML structure
                - Test that patterns follow WordPress coding standards for PHP"
        # WordPress Template Parts (.html)
        # Modular template components for headers, footers, navigation, etc.
        - path: '**/parts/*.html'
          instructions: |
              "Review WordPress template parts for block theme compatibility:
                - Ensure template parts follow WordPress HTML template structure
                - Verify proper use of WordPress block markup
                - Check semantic HTML elements and proper heading hierarchy
                - Validate accessibility features (ARIA roles, alt attributes)
                - Ensure template parts use theme.json variables for styling
                - Check compatibility with Full Site Editing interface
                - Verify proper block structure and nesting
                - Validate responsive design across different screen sizes"
        # WordPress Block Templates (.html)
        # Full page templates following WordPress template hierarchy
        - path: '**/templates/*.html'
          instructions: |
              "Review WordPress block templates for FSE:
                - Ensure templates follow WordPress block template structure
                - Verify proper template hierarchy and naming conventions
                - Check integration with template parts and patterns
                - Validate proper query loop implementation for dynamic content
                - Ensure templates maintain design consistency
                - Check accessibility compliance throughout templates
                - Verify responsive behavior across all devices"
        # JavaScript/TypeScript Files for WordPress Block Themes
        # Minimal JS approach following WordPress block theme best practices
        - path: '**/*.{js,ts}'
          instructions: |
              "Review JavaScript/TypeScript for WordPress block theme:
                - Ensure minimal JavaScript usage following block theme best practices
                - Verify scripts enhance rather than replace native WordPress functionality
                - Check for proper WordPress script enqueueing in functions.php
                - Validate accessibility enhancements don't conflict with core features
                - Ensure performance optimization and avoid unnecessary dependencies
                - Check compatibility with WordPress script loading patterns
                - Verify proper event handling and DOM manipulation
                - Ensure scripts work with both frontend and editor interfaces"
        - path: '**/*.{css,scss}'
          instructions: |
              "Review CSS/SCSS for WordPress block theme:
                - Prefer theme.json configuration over custom CSS when possible
                - Ensure CSS enhances rather than replaces theme.json settings
                - Check for proper use of CSS custom properties from theme.json
                - Validate responsive design using consistent breakpoints
                - Ensure accessibility compliance in custom styles
                - Check for performance optimization (minimal CSS, efficient selectors)
                - Verify styles don't conflict with core WordPress block styles
                - Ensure proper CSS organization and maintainability"
        - path: '**/functions.php'
          instructions: |
              "Review functions.php for WordPress block theme:
                - Ensure theme setup follows WordPress block theme standards
                - Verify proper theme support declarations for FSE features
                - Check secure coding practices (sanitization, validation, escaping)
                - Validate proper hook usage and WordPress coding standards
                - Ensure compatibility with latest WordPress version
                - Check for performance optimization in theme functions
                - Verify proper asset enqueueing and dependency management
                - Ensure functions don't conflict with block editor functionality"
        - path: '**/e2e/*.{ts,js}'
          instructions: |
              "Review Playwright end-to-end tests for WordPress block theme:
                - Ensure tests cover accessibility validation across all pages
                - Verify tests check responsive design at multiple breakpoints
                - Check tests validate Full Site Editing functionality
                - Ensure tests cover block pattern and template part functionality
                - Verify proper test structure and maintainability
                - Check for comprehensive coverage of user journeys
                - Validate tests check WordPress-specific functionality
                - Ensure tests are reliable and don't produce false positives"
        - path: '**/package.json'
          instructions: |
              "Review package.json for WordPress block theme project:
                - Ensure dependencies are WordPress theme development focused
                - Check for security vulnerabilities in dependencies
                - Verify build scripts are optimized for WordPress block themes
                - Ensure proper version management and semantic versioning
                - Check for unnecessary dependencies that could impact performance
                - Validate proper development vs production dependency separation"
        - path: '**/composer.json'
          instructions: |
              "Review composer.json for WordPress development:
                - Ensure PHP dependencies are WordPress compatible
                - Check for security best practices in package selection
                - Verify proper autoloading configuration
                - Ensure compatibility with WordPress coding standards tools
                - Check for appropriate development dependencies (PHPStan, PHPCS)
                - Validate proper version constraints for stability"
early_access: false
auto_review:
    enabled: true
    ignore_title_keywords:
        - 'WIP'
        - 'DO NOT MERGE'
        - 'DRAFT'
    drafts: false
    base_branches:
        - 'main'
        - 'develop'
        - 'feature/*'
